<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Leader Management Dashboard</title>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />

    <style>

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      }

      
.loading {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.loading::after {
    content: '';
    width: 50px;
    height: 50px;
    border: 5px solid #f3f3f3;
    border-top: 5px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

      :root {
        --primary-color: #2563eb;
        --secondary-color: #1e40af;
        --background-color: #f1f5f9;
        --text-color: #1e293b;
        --sidebar-width: 250px;
      }

      body {
        background-color: var(--background-color);
      }

      .container {
        display: flex;
        min-height: 100vh;
      }

      /* Sidebar Styles */
      .sidebar {
        width: var(--sidebar-width);
        background-color: white;
        padding: 20px;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
        position: fixed;
        height: 100vh;
      }

      .logo {
        font-size: 24px;
        font-weight: bold;
        color: var(--primary-color);
        margin-bottom: 40px;
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .nav-item {
        padding: 12px 15px;
        margin: 5px 0;
        border-radius: 8px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 10px;
        color: var(--text-color);
        transition: all 0.3s ease;
      }

      .nav-item:hover {
        background-color: var(--primary-color);
        color: white;
      }

      .nav-item.active {
        background-color: var(--primary-color);
        color: white;
      }

      /* Main Content Styles */
      .main-content {
        margin-left: var(--sidebar-width);
        flex: 1;
        padding: 20px;
      }

      .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }

      .search-bar {
        display: flex;
        align-items: center;
        gap: 10px;
        background-color: var(--background-color);
        padding: 10px 15px;
        border-radius: 8px;
        width: 300px;
      }

      .search-bar input {
        border: none;
        background: none;
        outline: none;
        width: 100%;
      }

      .user-profile {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: var(--primary-color);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
      }

      /* Dashboard Cards */
      .dashboard-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
      }

      .card {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }

      .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
      }

      .card-icon {
        width: 40px;
        height: 40px;
        background-color: var(--primary-color);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
      }

      .card-title {
        font-size: 14px;
        color: #64748b;
      }

      .card-value {
        font-size: 24px;
        font-weight: bold;
        color: var(--text-color);
      }

      /* leader List Table */
      .leader-list {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }

      .table-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
      }

      .add-leader-btn {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: background-color 0.3s ease;
      }

      .add-leader-btn:hover {
        background-color: var(--secondary-color);
      }

      table {
        width: 100%;
        border-collapse: collapse;
      }

      th,
      td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #e2e8f0;
      }

      th {
        background-color: #f8fafc;
        color: #64748b;
        font-weight: 600;
      }

      tr:hover {
        background-color: #f8fafc;
      }

      .status-badge {
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 12px;
        font-weight: 500;
      }

      .status-active {
        background-color: #dcfce7;
        color: #166534;
      }

      .status-inactive {
        background-color: #fee2e2;
        color: #991b1b;
      }

      .action-buttons {
        display: flex;
        gap: 8px;
      }

      .action-btn {
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
      }

      .edit-btn {
        background-color: #dbeafe;
        color: var(--primary-color);
      }

      .delete-btn {
        background-color: #fee2e2;
        color: #dc2626;
      }

      /* Modal Styles */
      .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
      }

      .modal-content {
        background-color: white;
        padding: 30px;
        border-radius: 10px;
        width: 500px;
        max-width: 90%;
      }

      .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
      }

      .close-btn {
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
        color: #64748b;
      }

      .form-group {
        margin-bottom: 15px;
      }

      .form-group label {
        display: block;
        margin-bottom: 5px;
        color: var(--text-color);
      }

      .form-group input,
      .form-group select {
        width: 100%;
        padding: 8px;
        border: 1px solid #e2e8f0;
        border-radius: 5px;
        outline: none;
      }

      .form-group input:focus,
      .form-group select:focus {
        border-color: var(--primary-color);
      }

      .submit-btn {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        width: 100%;
        margin-top: 20px;
      }

      .submit-btn:hover {
        background-color: var(--secondary-color);
      }
      .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 25px;
        color: white;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        opacity: 1;
        transition: opacity 0.5s ease;
      }

      .notification.success {
        background-color: #4caf50;
      }
      .notification.error {
        background-color: #f44336;
      }
      .notification.warning {
        background-color: #ff9800;
      }
      .notification.info {
        background-color: #2196f3;
      }

      .empty-state {
        text-align: center;
        padding: 40px 20px;
        color: #64748b;
      }

      .empty-state i {
        font-size: 48px;
        margin-bottom: 20px;
        color: #94a3b8;
      }

      .empty-state h3 {
        margin-bottom: 10px;
        color: #1e293b;
      }

      .day-list,
      .leader-list {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
      }

      .section {
        display: none;
      }

      .section.active {
        display: block;
      }

      .dashboard.active {
        display: grid;
      }

      textarea {
        width: 100%;
        padding: 8px;
        border: 1px solid #e2e8f0;
        border-radius: 5px;
        resize: vertical;
        min-height: 100px;
        font-family: inherit;
      }

      textarea:focus {
        border-color: var(--primary-color);
        outline: none;
      }

      .loading-spinner {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        z-index: 1000;
        justify-content: center;
        align-items: center;
      }

      .loading-spinner.active {
        display: flex;
      }

      .spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid var(--primary-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <!--Sidebar--->
      <div class="sidebar">
        <div class="logo">
          <i class="fas fa-graduation-"></i>
          ChainManager
        </div>

        <div class="nav-item active" data-section="dashboard">
          <i class="fas fa-chart-pie"></i>
          Dashboard
        </div>
        <div class="nav-item" data-section="leaders">
          <i class="fas fa-users"></i>
          Leaders
        </div>
        <div class="nav-item" data-section="days">
          <i class="fas fa-book"></i>
          Days
        </div>
        <div class="nav-item" data-section="reports">
          <i class="fas fa-chart-bar"></i>
          Reports
        </div>
        <div class="nav-item" data-section="settings">
          <i class="fas fa-cog"></i>
          Settings
        </div>
      </div>

      <!--Main Content-->
      <div class="main-content">
        <!-- Header -->
        <div class="header">
          <div class="search-bar">
            <i class="fas fa-search"></i>
            <input type="text" placeholder="Search leaders..." />
          </div>
          <div class="user-profile">
            <div class="user-avatar">
              <i class="fas fa-user"></i>
            </div>
            <span>Admin</span>
          </div>
        </div>

        <!-- Dashboard Section -->
        <div id="dashboardSection" class="section dashboard active">
          <div class="dashboard-cards">
            <div class="card">
              <div class="card-header">
                <div class="card-icon">
                  <i class="fas fa-users"></i>
                </div>
              </div>
              <div class="card-title">Total leaders</div>
              <div class="card-value">0</div>
            </div>
            <div class="card">
              <div class="card-header">
                <div class="card-icon">
                  <i class="fas fa-book"></i>
                </div>
              </div>
              <div class="card-title">Active days</div>
              <div class="card-value">0</div>
            </div>
            <!-- <div class="card">
              <div class="card-header">
                <div class="card-icon">
                  <i class="fas fa-graduation-cap"></i>
                </div>
              </div>
              <div class="card-title">Graduates</div>
              <div class="card-value">0</div>
            </div> -->
            <div class="card">
              <div class="card-header">
                <div class="card-icon">
                  <i class="fas fa-chart-line"></i>
                </div>
              </div>
              <div class="card-title"> Attendence </div>
              <div class="card-value">0%</div>
            </div>
          </div>

          <!---leader List in Dashboard-->
          <div class="leader-list">
            <div class="table-header">
              <h2>Recent leaders</h2>
              <button class="add-leader-btn" onclick="openModal()">
                <i class="fas fa-plus"></i>
                Add leader
              </button>
            </div>
            <table>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Name</th>
                  <th>day</th>
                  <!-- <th>Enrollment Date</th>
                  <th>Status</th> -->
                  <!-- <th>Actions</th> -->
                </tr>
              </thead>
              <tbody id="leaderTableBody">
                <!-- Will be populated dynamically -->
              </tbody>
            </table>
          </div>
        </div>

        <!-- leaders Section -->
        <div id="leadersSection" class="section">
          <div class="leader-list">
            <div class="table-header">
              <h2>All leaders</h2>
              <button class="add-leader-btn" onclick="openModal()">
                <i class="fas fa-plus"></i>
                Add leader
              </button>
            </div>
            <table>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Name</th>
                  <th>day</th>
                  <th>Enrollment Date</th>
                  <th>Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="allleadersTableBody">
                <!-- Will be populated dynamically -->
              </tbody>
            </table>
          </div>
        </div>

        <!-- days Section -->
        <div id="daysSection" class="section">
          <div class="day-list">
            <div class="table-header">
              <h2>day Management</h2>
              <button class="add-leader-btn" onclick="opendayModal()">
                <i class="fas fa-plus"></i>
                Add day
              </button>
            </div>
            <table>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Name</th>
                  <th>Description</th>
                  <th>Duration (months)</th>
                  <th>Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="dayTableBody">
                <!-- Will be populated dynamically -->
              </tbody>
            </table>
          </div>
        </div>

        <!-- Reports Section -->
        <div id="reportsSection" class="section">
          <h2>Reports Coming Soon</h2>
        </div>

        <!-- Settings Section -->
        <div id="settingsSection" class="section">
          <h2>Settings Coming Soon</h2>
        </div>
      </div>
    </div>

    <!-- leader Modal -->
    <div class="modal" id="leaderModal">
      <div class="modal-content">
        <div class="modal-header">
          <h2 id="modalTitle">Add New leader</h2>
          <button class="close-btn" onclick="closeModal()">&times;</button>
        </div>
        <form id="leaderForm">
          <div class="form-group">
            <label for="leaderName">Full Name</label>
            <input type="text" id="leaderName" required />
          </div>
          <div class="form-group">
            <label for="leaderEmail">Email</label>
            <input type="email" id="leaderEmail" required />
          </div>
          <div class="form-group">
            <label for="leaderday">day</label>
            <select id="leaderday" required>
              <option value="">Select day</option>
            </select>
          </div>
          <div class="form-group">
            <label for="enrollmentDate">Enrollment Date</label>
            <input type="date" id="enrollmentDate" required />
          </div>
          <button type="submit" class="submit-btn">Save leader</button>
        </form>
      </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal" id="deleteConfirmationModal">
      <div class="modal-content">
        <div class="modal-header">
          <h2>Confirm Deletion</h2>
          <button class="close-btn" onclick="closeDeleteModal()">
            &times;
          </button>
        </div>
        <div style="margin: 20px 0">
          <p>
            Are you sure you want to delete this item? This action cannot be
            undone.
          </p>
        </div>
        <div style="display: flex; gap: 10px; justify-content: flex-end">
          <button
            class="action-btn"
            onclick="closeDeleteModal()"
            style="padding: 8px 16px"
          >
            Cancel
          </button>
          <button
            class="action-btn delete-btn"
            onclick="confirmDelete()"
            style="padding: 8px 16px"
          >
            Delete
          </button>
        </div>
      </div>
    </div>

    <!-- day Modal -->
    <div class="modal" id="dayModal">
      <div class="modal-content">
        <div class="modal-header">
          <h2 id="dayModalTitle">Add New day</h2>
          <button class="close-btn" onclick="closedayModal()">
            &times;
          </button>
        </div>
        <form id="dayForm">
          <div class="form-group">
            <label for="dayName">day Name</label>
            <input type="text" id="dayName" required />
          </div>
          <div class="form-group">
            <label for="dayDescription">Description</label>
            <textarea id="dayDescription" required rows="3"></textarea>
          </div>
          <div class="form-group">
            <label for="dayDuration">Duration (months)</label>
            <input type="number" id="dayDuration" required min="1" />
          </div>
          <div class="form-group">
            <label for="dayStatus">Status</label>
            <select id="dayStatus" required>
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>
          </div>
          <button type="submit" class="submit-btn">Save day</button>
        </form>
      </div>
    </div>

    <!-- Loading Spinner -->
    <div class="loading-spinner">
      <div class="spinner"></div>
    </div>

    <script>
      const API_BASE_URL = "http://localhost:5000";
      let leaders = [];
      let days = [];
      let currentSection = "dashboard";
      let editingId = null;
      let editingdayId = null;
      let deleteType = ""; // 'leader' or 'day'
      let deleteId = null;

      const leaderTableBody = document.getElementById("leaderTableBody");
      const allLeadersTableBody = document.getElementById(
        "allleadersTableBody"
      );
      const dayTableBody = document.getElementById("dayTableBody");
      const leaderModal = document.getElementById("leaderModal");
      const dayModal = document.getElementById("dayModal");
      const leaderForm = document.getElementById("leaderForm");
      const dayForm = document.getElementById("dayForm");
      const searchInput = document.querySelector(".search-bar input");
      const loadingSpinner = document.querySelector(".loading-spinner");


      
      // Add this at the top of your script section
      document.addEventListener('DOMContentLoaded', () => {
        // Check if user is logged in and is an admin
        const token = localStorage.getItem('token');
        const userRole = localStorage.getItem('userRole');
        
        if (!token || userRole !== 'admin') {
            // If not admin, redirect to login
            window.location.href = 'auth.html';
            return;
        }
        
        // Initialize dashboard if user is admin
        initializeEventListeners();
        checkAndLoadData();
      });

      // Initialize the dashboard
      document.addEventListener("DOMContentLoaded", async () => {
        initializeEventListeners();
        await checkAndLoadData();
      });

      // Initialize all event listeners
      function initializeEventListeners() {
        // Form submissions
        leaderForm.addEventListener("submit", handleFormSubmit);
        dayForm.addEventListener("submit", handledayFormSubmit);

        // Search functionality
        searchInput.addEventListener("input", handleSearch);

        // Navigation
        document.querySelectorAll(".nav-item").forEach((item) => {
          item.addEventListener("click", () => {
            const section = item.dataset.section;
            navigateToSection(section);
          });
        });

        // Modal outside click handlers
        window.onclick = (event) => {
          if (event.target === leaderModal) closeModal();
          if (event.target === dayModal) closedayModal();
        };
      }

      // Initial data load and checks
      async function checkAndLoadData() {
        showLoading();
        try {
          await loaddays();

          // Check if we have any days
          if (days.length === 0) {
            showNotification(
              "Please add days before managing leaders",
              "warning"
            );
            navigateToSection("days");
            openDayModal();
            return;
          }

          await Promise.all([loadleaders(), updateDashboardStats()]);
        } catch (error) {
          console.error("Error during initialization:", error);
          showNotification("Error initializing application", "error");
        } finally {
          hideLoading();
        }
      }

      // Navigation functions
      function navigateToSection(section) {
        currentSection = section;

        // Update active nav item
        document.querySelectorAll(".nav-item").forEach((item) => {
          item.classList.remove("active");
          if (item.dataset.section === section) {
            item.classList.add("active");
          }
        });

        // Hide all sections
        document.querySelectorAll(".section").forEach((section) => {
          section.classList.remove("active");
        });

        // Show selected section
        document.getElementById(`${section}Section`).classList.add("active");

        // Refresh data when switching sections
        if (section === "days") {
          loaddays();
        } else if (section === "leaders" || section === "dashboard") {
          loadleaders();
          updateDashboardStats();
        }
      }

      // API Functions
      async function updateDashboardStats() {
        try {
          const response = await fetch(`${API_BASE_URL}/api/dashboard/stats`);
          if (!response.ok) throw new Error("Failed to fetch dashboard stats");

          const stats = await response.json();

          // Update dashboard cards
          document.querySelector(".card:nth-child(1) .card-value").textContent =
            stats.totalleaders.toLocaleString();
          document.querySelector(".card:nth-child(2) .card-value").textContent =
            stats.activedays.toLocaleString();
          document.querySelector(".card:nth-child(3) .card-value").textContent =
            stats.graduates.toLocaleString();
          document.querySelector(
            ".card:nth-child(4) .card-value"
          ).textContent = `${stats.successRate}%`;
        } catch (error) {
          console.error("Error updating dashboard stats:", error);
          showNotification("Error updating statistics", "error");
        }
      }

      async function loadleaders() {
        try {
          const response = await fetch(`${API_BASE_URL}/api/leaders`);
          if (!response.ok) throw new Error("Failed to fetch leaders");

          leaders = await response.json();
          renderleaderTables(leaders);
        } catch (error) {
          console.error("Error loading leaders:", error);
          showNotification("Error loading leaders", "error");
          leaders = [];
          renderLeaderTables([]);
        }
      }

      async function loaddays() {
        try {
          const response = await fetch(`${API_BASE_URL}/api/days`);
          if (!response.ok) throw new Error("Failed to fetch days");

          days = await response.json();
          updatedayDropdown(days);
          renderdayTable(days);
          return days;
        } catch (error) {
          console.error("Error loading days:", error);
          showNotification("Error loading days", "error");
          days = [];
          renderdayTable([]);
        }
      }

      // CRUD Operations for leaders
      async function createLeader(leaderData) {
        const response = await fetch(`${API_BASE_URL}/api/leaders`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(leaderData),
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.message || "Failed to create leader");
        }

        return response.json();
      }

      async function updateLeader(id, leaderData) {
        const response = await fetch(`${API_BASE_URL}/api/leaders/${id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(leaderData),
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.message || "Failed to update leader");
        }

        return response.json();
      }

      async function deleteLeader(id) {
        deleteType = "leader";
        deleteId = id;
        document.getElementById("deleteConfirmationModal").style.display =
          "flex";
      }

      // CRUD Operations for days
      async function createDay(dayData) {
        const response = await fetch(`${API_BASE_URL}/api/days`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(dayData),
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.message || "Failed to create day");
        }

        return response.json();
      }

      async function updateDay(id, dayData) {
        const response = await fetch(`${API_BASE_URL}/api/days/${id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(dayData),
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.message || "Failed to update day");
        }

        return response.json();
      }

      async function deleteday(id) {
        deleteType = "day";
        deleteId = id;
        document.getElementById("deleteConfirmationModal").style.display =
          "flex";
      }

      function closeDeleteModal() {
        document.getElementById("deleteConfirmationModal").style.display =
          "none";
        deleteType = "";
        deleteId = null;
      }

      async function confirmDelete() {
        showLoading();
        try {
          if (deleteType === "leader") {
            const response = await fetch(
              `${API_BASE_URL}/api/leaders/${deleteId}`,
              {
                method: "DELETE",
              }
            );

            if (!response.ok) {
              throw new Error("Failed to delete leader");
            }

            showNotification("leader deleted successfully", "success");
            await loadleaders();
            await updateDashboardStats();
          } else if (deleteType === "day") {
            const response = await fetch(
              `${API_BASE_URL}/api/days/${deleteId}`,
              {
                method: "DELETE",
              }
            );

            if (!response.ok) {
              const error = await response.json();
              throw new Error(error.message || "Failed to delete day");
            }

            showNotification("day deleted successfully", "success");
            await loaddays();
            await updateDashboardStats();
          }
        } catch (error) {
          console.error("Error during deletion:", error);
          showNotification(error.message || "Error during deletion", "error");
        } finally {
          hideLoading();
          closeDeleteModal();
        }
      }

      // Form Handling
      async function handleFormSubmit(e) {
        e.preventDefault();
        showLoading();

        const leaderData = {
          name: document.getElementById("leaderName").value.trim(),
          email: document.getElementById("leaderEmail").value.trim(),
          day: document.getElementById("leaderday").value,
          enrollmentDate: document.getElementById("enrollmentDate").value,
          status: "active",
        };

        try {
          if (editingId) {
            await updateleader(editingId, leaderData);
            showNotification("leader updated successfully", "success");
          } else {
            await createleader(leaderData);
            showNotification("leader created successfully", "success");
          }
          closeModal();
          await loadleaders();
          await updateDashboardStats();
        } catch (error) {
          console.error("Error:", error);
          showNotification("Error saving leader data", "error");
        } finally {
          hideLoading();
        }
      }

      async function handledayFormSubmit(e) {
        e.preventDefault();
        showLoading();

        const dayData = {
          name: document.getElementById("dayName").value.trim(),
          description: document
            .getElementById("dayDescription")
            .value.trim(),
          duration: parseInt(document.getElementById("dayDuration").value),
          status: document.getElementById("dayStatus").value,
        };

        try {
          if (editingdayId) {
            await updateday(editingdayId, dayData);
            showNotification("day updated successfully", "success");
          } else {
            await createday(dayData);
            showNotification("day created successfully", "success");
          }
          closedayModal();
          await loaddays();
          await updateDashboardStats();
        } catch (error) {
          console.error("Error:", error);
          showNotification("Error saving day data", "error");
        } finally {
          hideLoading();
        }
      }

      // UI Rendering Functions
      function renderleaderTables(leadersToRender) {
        const tables = [leaderTableBody, allleadersTableBody];

        tables.forEach((table) => {
          if (!table) return; // Skip if table doesn't exist

          table.innerHTML = "";

          if (leadersToRender.length === 0) {
            const colSpan = table
              .closest("table")
              .querySelectorAll("th").length;
            table.innerHTML = `
                <tr>
                    <td colspan="${colSpan}" class="empty-state">
                        <i class="fas fa-users"></i>
                        <h3>No leaders Found</h3>
                        <p>Click "Add leader" to add your first leader</p>
                    </td>
                </tr>
            `;
            return;
          }

          leadersToRender.forEach((leader) => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${leader._id}</td>
                <td>${escapeHtml(leader.name)}</td>
                <td>${escapeHtml(leader.dayName || leader.day)}</td>
                <td>${formatDate(leader.enrollmentDate)}</td>
                <td>
                    <span class="status-badge status-${leader.status}">
                        ${capitalizeFirstLetter(leader.status)}
                    </span>
                </td>
                <td class="action-buttons">
                    <button class="action-btn edit-btn" onclick="editleader('${
                      leader._id
                    }')">
                        <i class="fas fa-edit"></i> Edit
                    </button>
                    <button class="action-btn delete-btn" onclick="deleteleader('${
                      leader._id
                    }')">
                        <i class="fas fa-trash"></i> Delete
                    </button>
                </td>
            `;
            table.appendChild(row);
          });
        });
      }

      function updatedayDropdown(days) {
        const daySelect = document.getElementById("leaderday");
        daySelect.innerHTML = '<option value="">Select day</option>';

        days
          .filter((day) => day.status === "active")
          .forEach((day) => {
            const option = document.createElement("option");
            option.value = day._id;
            option.textContent = day.name;
            daySelect.appendChild(option);
          });
      }

      function renderdayTable(daysToRender) {
        dayTableBody.innerHTML = "";

        if (daysToRender.length === 0) {
          dayTableBody.innerHTML = `
            <tr>
                <td colspan="6" class="empty-state">
                    <i class="fas fa-book"></i>
                    <h3>No days Found</h3>
                    <p>Click "Add day" to add your first day</p>
                </td>
            </tr>
        `;
          return;
        }

        daysToRender.forEach((day) => {
          const row = document.createElement("tr");
          row.innerHTML = `
            <td>${day._id}</td>
            <td>${escapeHtml(day.name)}</td>
            <td>${escapeHtml(day.description)}</td>
            <td>${day.duration}</td>
            <td>
                <span class="status-badge status-${day.status}">
                    ${capitalizeFirstLetter(day.status)}
                </span>
            </td>
            <td class="action-buttons">
                <button class="action-btn edit-btn" onclick="editday('${
                  day._id
                }')">
                    <i class="fas fa-edit"></i> Edit
                </button>
                <button class="action-btn delete-btn" onclick="deleteday('${
                  day._id
                }')">
                    <i class="fas fa-trash"></i> Delete
                </button>
            </td>
        `;
          dayTableBody.appendChild(row);
        });
      }

      // Modal Operations
      function openModal() {
        if (days.length === 0) {
          showNotification(
            "Please add at least one day before adding leaders",
            "warning"
          );
          navigateToSection("days");
          opendayModal();
          return;
        }

        leaderModal.style.display = "flex";
        editingId = null;
        leaderForm.reset();
        document.getElementById("modalTitle").textContent = "Add New leader";
      }

      function closeModal() {
        leaderModal.style.display = "none";
        editingId = null;
        leaderForm.reset();
      }

      function opendayModal() {
        dayModal.style.display = "flex";
        editingdayId = null;
        dayForm.reset();
        document.getElementById("dayModalTitle").textContent =
          "Add New day";
      }

      function closedayModal() {
        dayModal.style.display = "none";
        editingdayId = null;
        dayForm.reset();
      }

      // Update the editleader function
      async function editleader(id) {
        showLoading();
        try {
          const response = await fetch(`${API_BASE_URL}/api/leaders/${id}`);
          if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || "Failed to fetch leader");
          }

          const leader = await response.json();

          editingId = id;
          document.getElementById("modalTitle").textContent = "Edit leader";
          document.getElementById("leaderName").value = leader.name;
          document.getElementById("leaderEmail").value = leader.email;
          document.getElementById("leaderday").value = leader.day;
          document.getElementById("enrollmentDate").value = formatDateForInput(
            leader.enrollmentDate
          );

          leaderModal.style.display = "flex";
        } catch (error) {
          console.error("Error loading leader for edit:", error);
          showNotification(
            error.message || "Error loading leader data",
            "error"
          );
        } finally {
          hideLoading();
        }
      }

      // Update the editday function
      async function editday(id) {
        showLoading();
        try {
          const response = await fetch(`${API_BASE_URL}/api/days/${id}`);
          if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || "Failed to fetch day");
          }

          const day = await response.json();

          editingdayId = id;
          document.getElementById("dayModalTitle").textContent =
            "Edit day";
          document.getElementById("dayName").value = day.name;
          document.getElementById("dayDescription").value =
            day.description;
          document.getElementById("dayDuration").value = day.duration;
          document.getElementById("dayStatus").value = day.status;

          dayModal.style.display = "flex";
        } catch (error) {
          console.error("Error loading day for edit:", error);
          showNotification(
            error.message || "Error loading day data",
            "error"
          );
        } finally {
          hideLoading();
        }
      }

      // Search Functionality
      let searchTimeout;
      function handleSearch(e) {
        clearTimeout(searchTimeout);
        const searchTerm = e.target.value.trim();

        searchTimeout = setTimeout(async () => {
          if (searchTerm.length === 0) {
            await loadleaders();
            return;
          }

          showLoading();
          try {
            const response = await fetch(
              `${API_BASE_URL}/api/leaders/search?q=${encodeURIComponent(
                searchTerm
              )}`
            );
            if (!response.ok) throw new Error("Search failed");

            const filteredleaders = await response.json();
            renderleaderTables(filteredleaders);
          } catch (error) {
            console.error("Error searching leaders:", error);
            showNotification("Error searching leaders", "error");
          } finally {
            hideLoading();
          }
        }, 300); // Debounce search requests
      }

      // Utility Functions
      function formatDate(dateString) {
        const options = { year: "numeric", month: "short", day: "numeric" };
        return new Date(dateString).toLocaleDateString(undefined, options);
      }

      function formatDateForInput(dateString) {
        return new Date(dateString).toISOString().split("T")[0];
      }

      function capitalizeFirstLetter(string) {
        if (!string) return "";
        return string.charAt(0).toUpperCase() + string.slice(1);
      }

      function escapeHtml(unsafe) {
        if (!unsafe) return "";
        return unsafe
          .replace(/&/g, "&amp;")
          .replace(/</g, "&lt;")
          .replace(/>/g, "&gt;")
          .replace(/"/g, "&quot;")
          .replace(/'/g, "&#039;");
      }

      // Loading Spinner Functions
      function showLoading() {
        document.querySelector(".loading-spinner").classList.add("active");
      }

      function hideLoading() {
        document.querySelector(".loading-spinner").classList.remove("active");
      }

      // Notification System
      function showNotification(message, type = "info") {
        // Remove any existing notifications
        const existingNotifications =
          document.querySelectorAll(".notification");
        existingNotifications.forEach((notification) => notification.remove());

        // Create new notification
        const notification = document.createElement("div");
        notification.className = `notification ${type}`;
        notification.textContent = message;

        // Add notification to the document
        document.body.appendChild(notification);

        // Remove notification after delay
        setTimeout(() => {
          notification.style.opacity = "0";
          setTimeout(() => notification.remove(), 500);
        }, 3000);
      }

      // Error Handler
      function handleError(error, defaultMessage = "An error occurred") {
        console.error(error);
        showNotification(error.message || defaultMessage, "error");
      }

      // Update modal close handlers
      window.onclick = (event) => {
        if (event.target === leaderModal) closeModal();
        if (event.target === dayModal) closedayModal();
        if (event.target === document.getElementById("deleteConfirmationModal"))
          closeDeleteModal();
      };
    </script>
  </body>
</html>
